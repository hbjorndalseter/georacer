generator client {
    provider = "prisma-client-js"
    output   = "../../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
    srid      Int     @id
    auth_name String? @db.VarChar(256)
    auth_srid Int?
    srtext    String? @db.VarChar(2048)
    proj4text String? @db.VarChar(2048)
}

model Player {
    id    Int    @id @default(autoincrement())
    name  String @unique
    score Int
}

model SpacialQuestion {
    id       Int    @id @default(autoincrement())
    question String
    answer   String
    hint     String
    score    Int

    location  Node @relation(fields: [cityMapId, nodeId], references: [cityMapId, id])
    nodeId    Int
    cityMapId Int
}

model FactQuestion {
    id       Int    @id @default(autoincrement())
    question String
    answer   String
    hint     String
    score    Int

    location  Node @relation(fields: [cityMapId, nodeId], references: [cityMapId, id])
    nodeId    Int
    cityMapId Int
}

model RiddleQuestion {
    id       Int    @id @default(autoincrement())
    question String
    answer   String
    hint     String
    score    Int

    location  Node @relation(fields: [cityMapId, nodeId], references: [cityMapId, id])
    nodeId    Int
    cityMapId Int
}

model Node {
    id             Int
    cityMapId      Int
    lat            Float
    lng            Float
    isIntersection Boolean @default(false)

    cityMap         CityMap           @relation(fields: [cityMapId], references: [id])
    connections1    Edge[]            @relation("foo") // When a node has the smaller ID
    connections2    Edge[]            @relation("bar") // When a node has the larger ID
    FactQuestion    FactQuestion[]
    RiddleQuestion  RiddleQuestion[]
    SpacialQuestion SpacialQuestion[]

    @@id([cityMapId, id]) // Composite primary key
}

model Edge {
    cityMapId Int
    node1Id   Int // Always store the smaller node ID here
    node2Id   Int // Always store the larger node ID here

    node1 Node @relation("foo", fields: [cityMapId, node1Id], references: [cityMapId, id])
    node2 Node @relation("bar", fields: [cityMapId, node2Id], references: [cityMapId, id])

    @@id([cityMapId, node1Id, node2Id]) // Ensures each connection is unique
}

model CityMap {
    id    Int    @id @default(autoincrement())
    name  String
    nodes Node[]
}
