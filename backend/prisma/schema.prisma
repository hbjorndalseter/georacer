generator client {
    provider = "prisma-client-js"
    output   = "../../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
    srid      Int     @id
    auth_name String? @db.VarChar(256)
    auth_srid Int?
    srtext    String? @db.VarChar(2048)
    proj4text String? @db.VarChar(2048)
}

model Player {
    id                        Int               @id @default(autoincrement())
    name                      String            @unique
    games                     Game[]
    score                     Int
    completedSpacialQuestions SpacialQuestion[] @relation("completedSpacialQuestions")
    completedFactQuestions    FactQuestion[]    @relation("completedFactQuestions")
    completedRiddleQuestions  RiddleQuestion[]  @relation("completedRiddleQuestions")
}

model Game {
    id      Int      @id @default(autoincrement())
    name    String
    players Player[]
}

model SpacialQuestion {
    id          Int        @id @default(autoincrement())
    question    String
    answer      String
    location    Coordinate @relation(fields: [locationId], references: [id])
    locationId  Int
    completedBy Player[]   @relation("completedSpacialQuestions")
}

model FactQuestion {
    id          Int        @id @default(autoincrement())
    question    String
    answer      String
    location    Coordinate @relation(fields: [locationId], references: [id])
    locationId  Int
    completedBy Player[]   @relation("completedFactQuestions")
}

model RiddleQuestion {
    id          Int        @id @default(autoincrement())
    question    String
    answer      String
    location    Coordinate @relation(fields: [locationId], references: [id])
    locationId  Int
    completedBy Player[]   @relation("completedRiddleQuestions")
}

model Coordinate {
    id        Int   @id @default(autoincrement())
    latitude  Float
    longitude Float

    SpacialQuestion SpacialQuestion[]
    FactQuestion    FactQuestion[]
    RiddleQuestion  RiddleQuestion[]
}
